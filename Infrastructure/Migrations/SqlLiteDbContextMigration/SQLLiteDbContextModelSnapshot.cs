// <auto-generated />
using System;
using Infrastructure.AppDbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations.SqlLiteDbContextMigration
{
    [DbContext(typeof(SQLLiteDbContext))]
    partial class SQLLiteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Domain.ChangeTracker", b =>
                {
                    b.Property<int>("ChangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RecordID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SyncLogLogID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ChangeID");

                    b.HasIndex("SyncLogLogID");

                    b.ToTable("ChangeTracker");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.SyncLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SyncTimestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("LogID");

                    b.ToTable("SyncLogs");
                });

            modelBuilder.Entity("Domain.ChangeTracker", b =>
                {
                    b.HasOne("Domain.SyncLog", null)
                        .WithMany("ChangeTrackers")
                        .HasForeignKey("SyncLogLogID");
                });

            modelBuilder.Entity("Domain.Location", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany("Locations")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Domain.SyncLog", b =>
                {
                    b.Navigation("ChangeTrackers");
                });
#pragma warning restore 612, 618
        }
    }
}
